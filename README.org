*RT SIMULATE*

This program will show interactively how some real time algorithms work.
It works as:
1. insert a set of tasks
2. choose a scheduling algorithm
3. check if is schedulable or not

Tasks are taken from the command line or from a configuration file.

[[http://dit.unitn.it/~abeni/RTOS/index.html][This]] is the official site, more information on laboratories [[http://dit.unitn.it/~abeni/RTOS/lab.html][here]].

Using a MVC pattern to design the application, which must be easily adapt to new algorithms and data types.

* Languages used
  - python (for the gui and control interface)
  - C/pyrex extension (for the algorithm engine)

* Frameworks
  - wxgtk/gtk/dialog?
  - [[http://wiki.wxpython.org/How%20to%20Learn%20wxPython][How to learn wxpython]]
    
* Language table

  |------------+------------------------------|
  | Task       | Schedulable entity           |
  | Preemptive | OS can regain control of cpu |
  | WCET       |                              |

* Theory summary
  OS kernel creates the illusion of multiple CPUs, concurrency is implemented by multiplexing tasks.
  Tasks are associated to temporal constraints (*deadlines*)
  
  Scheduler is responsible for selecting the tasks to execute.
  
Algorithms:
** STATIC scheduling algorithm
   - Time axis divided in time slots
   - Slots statically allocated to the tasks
   - $\tau$ = *gcd*, $T$ = *lcm*
   - Very simple implementation, no operating system needed

     *NOT VERY CLEAR HOW TO IMPLEMENT THIS, only frequencies and timings in the slides.*
     What's the deadline in this case?
     In general enough to fire a timer every *minor cycle*.

** Fixed priority scheduling
   Very simple /preemptive/ scheduling algorithm.
   - every task has a fixed priority p_i
   - active task with highest priority are scheduled

     To have a better response of the system the priority must be chosen dynamically.
     So the problem becomes, how to assign priorities to manage to have a schedulable set of tasks?

** Dynamic priority scheduling algorithms:
   Given a set, how to assign priorities?
   Two possible objectives:
   - schedulability
   - response time
      
   - Given a set of tasks where all periods are equal to deadlines and offsets equal to 0.
      ($\forall i, D_i = T_i
     \forall i, r_i0 = 0$)
     [[dead][deadline monotonic]] is the best choice

   - Given a set of tasks where all periods are different from deadlines
     [[rate][rate monotonic]] is the best choice
     
     If we consider periodic tasks with offsets, then /there is no optimal priority assignment possible/

#<<dead>>
*** Deadline monotonic
    Shorter period $\rightarrow$ higher priority.

#<<rate>>
*** Rate monotonic
    Shorter relative deadline $\rightarrow$ higher priority.

** Analysis
   Given a set of tasks, how can we make sure that is possible to schedule them?
   
